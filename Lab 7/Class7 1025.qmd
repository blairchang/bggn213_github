---
title: "Lab7 PID: A59000602"
author: "Blair Chang"
format: pdf
---

#Clustering

We will start with k-means clustering, one of the most prevelent of all clustering methods.

To get started let's make some data up:

```{r}
hist(rnorm(10000, mean = 3, sd = 2)) #from normal distribution
```

```{r}
tmp <- c(rnorm(30, 3), rnorm(30, -3))
x <- cbind(x = tmp, y = rev(tmp))
plot(x)
```
The main function in R for k-means clustering is called `kmeans()`.

```{r}
k <- kmeans(x, centers = 2, nstart = 20)
k
```

#components can be containers (list) for your data


Q1. how many points are there in each cluster?

```{r}
k$size

```

Q2. The clustering result i.e. membership vector?

```{r}
k$cluster
```
Q3. Cluster centers

```{r}
k$centers
```

Q4. Make a plot of out data colored by clustering results with optionally the cluster centers shown.

```{r}
plot(x, col=c("red", "blue")) #recycle red/blue till it reaches 60

plot(x, col= k$cluster, pch=16)
points(k$centers, col="blue", pch=12, cex=3)

```


Q5. Run kmeans again but cluster into 3 groups and plot the results like we did above.

```{r}
k3 <- kmeans(x, centers= 3, nstart= 20)
plot(x, col=k3$cluster, pch=16)
```

K-means will always return a clustering result - even if there is no clear groupings.

# Hierarchical Clustering 

Hierarchical clustering it has an advantage in that it can reveal the structure in your data rather than imposing a strusture as k-means will.

The main function in "base" R is called `hclust()`

It requires a distance matrix as input, not the row data itself.


```{r}
hc <- hclust(dist(x))
hc
```

```{r}
plot(hc)
abline(h=8, col="red")
```

The function to get our clustering/ groups from a hcluct object is called `cutree()`

```{r}
grps <- cutree(hc, h=4)
grps
```

Q. Plot our hclust results in terms of out data colored by cluster membership.

```{r}
plot(x, col=grps, pch=16)
```

# Principal Component Analysis (PCA)

WE will work on data from the UK about the strange stuff folks there eat. 

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
#Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

dim(x)
#Q2 Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

head(x)
```

```{r}
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```

```{r}
x <- read.csv(url, row.names=1)
head(x)
```
Q3: Changing what optional argument in the above barplot() function results in the following plot?

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

Q5: Generating all pairwise plots may help somewhat. 
Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

# Yes. It plots and compares each country. The distance of that point bw two countries is the same, meaning that it is the most similar factor bw those countries. 

```{r}
pairs(x, col=rainbow(17), pch=16)
```
Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

N. Ireland looks very different from other 3 countries in terms of food preference, the blue and green and pink points are far away from the diagonal.

```{r}
pca <- prcomp( t(x) )
summary(pca)
```

Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```
Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], col=rainbow(nrow(x)), colnames(x))
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v

z <- summary(pca)
z$importance

barplot(v, xlab="Principal Component", ylab="Percent Variation")

```

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```
Q9: Generate a similar ‘loadings plot’ for PC2. What two food groups feature prominantely and what does PC2 maninly tell us about?


```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```
Here we see observations (foods) with the largest positive loading scores that effectively “push” N. Ireland to right positive side of the plot (Soft_drinks and Acoholic_drinks).

We can also see the observations/foods with high negative scores that push the other countries to the left side of the plot (Fresh_potatoes).






# PCA to the rescue


Help me make sense of this data
The main function for PCA in base R is called `prcomp()`

It wants the transpose (with the `t()`) of our food data for analysis.

```{r}
pca <- prcomp(t(x))

summary(pca)
```
One of the main results that folks look for is called the "score plot" aka PC plot, PC1 vs PC2 plot

```{r}
plot(pca$x[,1], pca$x[,2])
abline(h=0)
```



```{r}
library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# Our first basic plot


ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()
```

##PCA of RNA-seq data

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
dim(rna.data)
```
Q10:  How many genes and samples are in this data set?

100 genes and 10 samples

